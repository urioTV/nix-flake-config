From 1bdb3311d1d09e78527e9b7d78cd5f8b7244fd83 Mon Sep 17 00:00:00 2001
From: Alex Deucher <alexander.deucher@amd.com>
Date: Fri, 14 Feb 2025 12:32:30 -0500
Subject: [PATCH] drm/amdgpu/mes: keep enforce isolation up to date

[ Upstream commit 748a1f51bb74453f1fe22d3ca68a717cb31f02e5 ]

Re-send the mes message on resume to make sure the
mes state is up to date.

Fixes: 8521e3c5f058 ("drm/amd/amdgpu: limit single process inside MES")
Acked-by: Srinivasan Shanmugam <srinivasan.shanmugam@amd.com>
Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
Cc: Shaoyun Liu <shaoyun.liu@amd.com>
Cc: Srinivasan Shanmugam <srinivasan.shanmugam@amd.com>
Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
(cherry picked from commit 27b791514789844e80da990c456c2465325e0851)
Signed-off-by: Sasha Levin <sashal@kernel.org>
---
 drivers/gpu/drm/amd/amdgpu/amdgpu_gfx.c | 13 +++++++++----
 drivers/gpu/drm/amd/amdgpu/amdgpu_mes.c | 20 +-------------------
 drivers/gpu/drm/amd/amdgpu/amdgpu_mes.h |  2 +-
 drivers/gpu/drm/amd/amdgpu/mes_v11_0.c  |  4 ----
 drivers/gpu/drm/amd/amdgpu/mes_v12_0.c  |  4 ----
 5 files changed, 11 insertions(+), 32 deletions(-)

diff --git b/drivers/gpu/drm/amd/amdgpu/amdgpu_gfx.c a/drivers/gpu/drm/amd/amdgpu/amdgpu_gfx.c
index 7ec35e367758..11aa55bd16d2 100644
--- b/drivers/gpu/drm/amd/amdgpu/amdgpu_gfx.c
+++ a/drivers/gpu/drm/amd/amdgpu/amdgpu_gfx.c
@@ -1593,18 +1593,23 @@ static ssize_t amdgpu_gfx_set_enforce_isolation(struct device *dev,
 	}
 
 	mutex_lock(&adev->enforce_isolation_mutex);
+
 	for (i = 0; i < num_partitions; i++) {
-		if (adev->enforce_isolation[i] && !partition_values[i])
+		if (adev->enforce_isolation[i] && !partition_values[i]) {
 			/* Going from enabled to disabled */
 			amdgpu_vmid_free_reserved(adev, AMDGPU_GFXHUB(i));
-		else if (!adev->enforce_isolation[i] && partition_values[i])
+			if (adev->enable_mes && adev->gfx.enable_cleaner_shader)
+				amdgpu_mes_set_enforce_isolation(adev, i, false);
+		} else if (!adev->enforce_isolation[i] && partition_values[i]) {
 			/* Going from disabled to enabled */
 			amdgpu_vmid_alloc_reserved(adev, AMDGPU_GFXHUB(i));
+			if (adev->enable_mes && adev->gfx.enable_cleaner_shader)
+				amdgpu_mes_set_enforce_isolation(adev, i, true);
+		}
 		adev->enforce_isolation[i] = partition_values[i];
 	}
-	mutex_unlock(&adev->enforce_isolation_mutex);
 
-	amdgpu_mes_update_enforce_isolation(adev);
+	mutex_unlock(&adev->enforce_isolation_mutex);
 
 	return count;
 }
diff --git b/drivers/gpu/drm/amd/amdgpu/amdgpu_mes.c a/drivers/gpu/drm/amd/amdgpu/amdgpu_mes.c
index 452ca07e7e7d..59ec20b07a6a 100644
--- b/drivers/gpu/drm/amd/amdgpu/amdgpu_mes.c
+++ a/drivers/gpu/drm/amd/amdgpu/amdgpu_mes.c
@@ -1679,8 +1679,7 @@ bool amdgpu_mes_suspend_resume_all_supported(struct amdgpu_device *adev)
 }
 
 /* Fix me -- node_id is used to identify the correct MES instances in the future */
-static int amdgpu_mes_set_enforce_isolation(struct amdgpu_device *adev,
-					    uint32_t node_id, bool enable)
+int amdgpu_mes_set_enforce_isolation(struct amdgpu_device *adev, uint32_t node_id, bool enable)
 {
 	struct mes_misc_op_input op_input = {0};
 	int r;
@@ -1702,23 +1701,6 @@ static int amdgpu_mes_set_enforce_isolation(struct amdgpu_device *adev,
 	return r;
 }
 
-int amdgpu_mes_update_enforce_isolation(struct amdgpu_device *adev)
-{
-	int i, r = 0;
-
-	if (adev->enable_mes && adev->gfx.enable_cleaner_shader) {
-		mutex_lock(&adev->enforce_isolation_mutex);
-		for (i = 0; i < (adev->xcp_mgr ? adev->xcp_mgr->num_xcps : 1); i++) {
-			if (adev->enforce_isolation[i])
-				r |= amdgpu_mes_set_enforce_isolation(adev, i, true);
-			else
-				r |= amdgpu_mes_set_enforce_isolation(adev, i, false);
-		}
-		mutex_unlock(&adev->enforce_isolation_mutex);
-	}
-	return r;
-}
-
 #if defined(CONFIG_DEBUG_FS)
 
 static int amdgpu_debugfs_mes_event_log_show(struct seq_file *m, void *unused)
diff --git b/drivers/gpu/drm/amd/amdgpu/amdgpu_mes.h a/drivers/gpu/drm/amd/amdgpu/amdgpu_mes.h
index f089c5087c63..c6f93cbd6739 100644
--- b/drivers/gpu/drm/amd/amdgpu/amdgpu_mes.h
+++ a/drivers/gpu/drm/amd/amdgpu/amdgpu_mes.h
@@ -534,6 +534,6 @@ static inline void amdgpu_mes_unlock(struct amdgpu_mes *mes)
 
 bool amdgpu_mes_suspend_resume_all_supported(struct amdgpu_device *adev);
 
-int amdgpu_mes_update_enforce_isolation(struct amdgpu_device *adev);
+int amdgpu_mes_set_enforce_isolation(struct amdgpu_device *adev, uint32_t node_id, bool enable);
 
 #endif /* __AMDGPU_MES_H__ */
diff --git b/drivers/gpu/drm/amd/amdgpu/mes_v11_0.c a/drivers/gpu/drm/amd/amdgpu/mes_v11_0.c
index 40750e5478ef..9c905b9e9376 100644
--- b/drivers/gpu/drm/amd/amdgpu/mes_v11_0.c
+++ a/drivers/gpu/drm/amd/amdgpu/mes_v11_0.c
@@ -1635,10 +1635,6 @@ static int mes_v11_0_hw_init(struct amdgpu_ip_block *ip_block)
 		goto failure;
 	}
 
-	r = amdgpu_mes_update_enforce_isolation(adev);
-	if (r)
-		goto failure;
-
 out:
 	/*
 	 * Disable KIQ ring usage from the driver once MES is enabled.
diff --git b/drivers/gpu/drm/amd/amdgpu/mes_v12_0.c a/drivers/gpu/drm/amd/amdgpu/mes_v12_0.c
index 0921fd8c050d..9ecc5d61e49b 100644
--- b/drivers/gpu/drm/amd/amdgpu/mes_v12_0.c
+++ a/drivers/gpu/drm/amd/amdgpu/mes_v12_0.c
@@ -1590,10 +1590,6 @@ static int mes_v12_0_hw_init(struct amdgpu_ip_block *ip_block)
 		goto failure;
 	}
 
-	r = amdgpu_mes_update_enforce_isolation(adev);
-	if (r)
-		goto failure;
-
 out:
 	/*
 	 * Disable KIQ ring usage from the driver once MES is enabled.
-- 
2.49.0

